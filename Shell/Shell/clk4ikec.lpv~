// 
// OS2.c
// 
//		Main file
// 

#include <io.h>
#include <conio.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>
#include <process.h>
#include <Windows.h>

const char* cmd[] = {
	"calc", 
	"noteped", 
	"hostname", 
	"help", 
	"time", 
	"product", 
	"bye"
};

static void calc(char* command, char* parameter);
static void noteped(char* command, char* parameter);
static void hostname(char* command, char* parameter);
static void help(char* command, char* parameter);
static void time(char* command, char* parameter);
static void product(char* command, char* parameter);
static void bye(void);

char* argGetter(void);

int main(void) {

	while (true) {
		char* commandLine = 0;
		char* command = 0;
		char* parameterLine = 0;
		char* parameter = 0;
		printf("Shell >");
		commandLine = argGetter();
		printf("%s\n", commandLine);
		command = strtok_s(commandLine, " ", &parameterLine);
		noteped(0, 0);
		free(commandLine);
	}

	return 0;
}

static void calc(char* command, char* parameter) {
	system("C:\\Windows\\System32\\calc.exe");
	return;
}

static void noteped(char* command, char* parameter) {
	if (_access("C:\\Windows\\System32\\noteped.exe", 0) != -1) {
		printf("file is found");
	}
	else {
		printf("file is not found");
	}
	system("C:\\Windows\\System32\\noteped.exe");
	return;
}

static void bye(void) {
	exit(EXIT_SUCCESS);
}

char* argGetter(void) {

	unsigned sz = 256;
	char* argv = { 0 };
	if ((argv = (char*)calloc(sz, sizeof(char))) == NULL) {
		printf("Allocation failed.\n\n");
		return 0;
	}
	fgets(argv, sz, stdin);

	char ch = 0;
	unsigned argc = (unsigned)strlen(argv);
	if (argv[argc - 1] != '\n') while ((ch = getchar()) != '\n' && ch != EOF);
	else argv[argc - 1] = '\0';

	char* command = 0;
	if ((command = (char*)calloc((size_t)argc + 1, sizeof(char))) == NULL) {
		printf("Allocation failed.\n\n");
		free(argv);
		return 0;
	}

	for (unsigned i = 0; i < argc; i++) command[i] = argv[i];
	free(argv);
	return command;
}
